### **Deep Copy vs Shallow Copy in JavaScript (With Address Reference)**  

In JavaScript, copying data means creating a new variable with the same value as the original. However, whether the copied variable shares the same memory address as the original or gets a completely new address depends on **whether the data type is primitive or non-primitive**.

---

## **1. Primitive Data Types (Stored in Stack Memory)**  
Primitive data types in JavaScript include:
- `Number`
- `String`
- `Boolean`
- `null`
- `undefined`
- `Symbol`
- `BigInt`

### **Copying Primitive Values (Always a Deep Copy)**
üìå **Primitives are immutable and stored directly in the stack memory.** When you assign a primitive value to another variable, a new memory location is created, meaning both variables are completely independent.

```js
let a = 10;
let b = a; // Copying the value of 'a' into 'b'

console.log(a, b); // 10, 10

b = 20; // Modifying 'b'

console.log(a, b); // 10, 20 (a remains unchanged)
```

‚úÖ Here, `b` gets a new copy of `a`, and both `a` and `b` are stored at different memory addresses.  
‚úÖ **No reference is shared**, so modifying `b` does not affect `a`.  

Thus, **primitive types always perform a deep copy**.

---

## **2. Non-Primitive (Reference) Data Types (Stored in Heap Memory)**
Non-primitive types include:
- `Object`
- `Array`
- `Function`

üìå **Non-primitives are stored in heap memory, and variables store only a reference (address) to the actual data.** Copying an object or array does not create a new independent copy; instead, it copies the reference.

---

### **Shallow Copy (Same Reference, Different Variable)**
A **shallow copy** means that the new variable points to the same memory location as the original variable.  
So, changing the new variable **also affects the original object**.

```js
let obj1 = { name: "John", age: 25 };
let obj2 = obj1; // Shallow copy (only reference is copied)

console.log(obj1, obj2); // { name: 'John', age: 25 } { name: 'John', age: 25 }

obj2.age = 30; // Modifying obj2

console.log(obj1, obj2); // { name: 'John', age: 30 } { name: 'John', age: 30 }
```

üî¥ Here, `obj2` is **not a new object**. Instead, it just holds the **same memory reference** as `obj1`.  
üî¥ Changing `obj2` **also modifies `obj1`**, because both reference the **same address** in heap memory.

---

### **Shallow Copy Methods in JavaScript**
The following methods create a **shallow copy**:
1. **Object.assign()**
2. **Spread Operator (`...`)**
3. **Array.slice()**
4. **Array.concat()**

Example:

```js
let obj1 = { name: "Alice", address: { city: "New York" } };
let obj2 = { ...obj1 }; // Shallow copy using spread

obj2.address.city = "Los Angeles"; // Changing nested object property

console.log(obj1.address.city); // "Los Angeles"
console.log(obj2.address.city); // "Los Angeles"
```

üî¥ Even though `{ ...obj1 }` creates a new object, it **only copies the top-level properties**.  
üî¥ The `address` property is still a reference to the same memory location.

---

### **Deep Copy (New Address, Completely Independent)**
A **deep copy** creates a new object with new memory locations for all nested properties.  
This ensures changes in the new object do not affect the original.

### **Deep Copy Methods in JavaScript**
#### **1. JSON.stringify() + JSON.parse() (Basic Deep Copy)**
```js
let obj1 = { name: "Alice", address: { city: "New York" } };
let obj2 = JSON.parse(JSON.stringify(obj1)); // Deep copy

obj2.address.city = "Los Angeles"; // Changing nested object property

console.log(obj1.address.city); // "New York" (Original remains unchanged)
console.log(obj2.address.city); // "Los Angeles"
```
‚úÖ Now, `obj1` and `obj2` are stored at different memory locations.

üî¥ **Limitations**:
- Cannot copy functions.
- Cannot copy special objects like `Date` or `RegExp`.

---

#### **2. Using Lodash (`_.cloneDeep`)**
For a perfect deep copy, use the **lodash** library:

```js
const _ = require('lodash');

let obj1 = { name: "Alice", address: { city: "New York" } };
let obj2 = _.cloneDeep(obj1); // Deep copy

obj2.address.city = "Los Angeles";

console.log(obj1.address.city); // "New York"
console.log(obj2.address.city); // "Los Angeles"
```
‚úÖ **All nested properties are copied, and a completely new object is created.**

---

### **Summary**
| Copy Type | Memory Address | Affects Original? | Methods |
|-----------|---------------|-------------------|---------|
| **Primitive Copy** | New address | ‚ùå No | Direct assignment (`=`) |
| **Shallow Copy** | Same address for nested objects | ‚úÖ Yes | `Object.assign()`, `{ ...obj }`, `slice()`, `concat()` |
| **Deep Copy** | New address for all levels | ‚ùå No | `JSON.parse(JSON.stringify())`, `_.cloneDeep()` |

---

### **Final Takeaways**
‚úî **Primitive values always create a deep copy (new address).**  
‚úî **Objects and arrays create a shallow copy unless explicitly deep-copied.**  
‚úî **Shallow copies share references, while deep copies store independent data.**  
‚úî **Use `JSON.stringify()` or `_.cloneDeep()` for deep copying objects.**  

Let me know if you need further clarifications! üöÄ




Q:- Good but undersand me according to memory address of each variable store in memory?
### **Deep vs Shallow Copy in JavaScript (Memory Address Perspective)**  

To fully understand deep and shallow copy in JavaScript, let's analyze how **variables store addresses in memory** for **primitive and non-primitive data types**.

---

## **1. Primitive Data Types (Stored in Stack Memory)**
Primitive data types (`Number`, `String`, `Boolean`, `null`, `undefined`, `Symbol`, `BigInt`) are **stored directly in the stack memory**.  

üìå **Each primitive variable gets its own memory address.**

```js
let a = 10;  // Memory Address: 0x001 ‚Üí Value: 10
let b = a;   // Memory Address: 0x002 ‚Üí Value: 10
```
üîπ **Each primitive variable has a separate memory location.**  
üîπ **Copying `a` to `b` creates a new memory location (`0x002`) with the same value (`10`).**  
üîπ **Modifying `b` does not affect `a` because they are stored separately.**

### **Example in Code**
```js
let a = 10;
let b = a; // A new memory address is created for b

b = 20; // Modifying b

console.log(a); // 10 (Unchanged)
console.log(b); // 20
```

‚úÖ **Since each variable stores the value in a different memory address, modifying `b` does not change `a`.**  
‚úÖ **This is always a deep copy because primitives do not share memory addresses.**

---

## **2. Non-Primitive Data Types (Stored in Heap Memory)**
Objects, arrays, and functions are stored in **heap memory**, while **variables hold only a reference (memory address) to the actual data**.
//learn above above line in info-two.txt.
### **Shallow Copy (Same Memory Address)**
A shallow copy means that **the new variable holds the same memory address as the original variable** instead of creating a new object.

```js
let obj1 = { name: "John", age: 25 };
let obj2 = obj1; // Copies reference, not value

// Memory Representation:
obj1 ‚Üí Address: 0x100 ‚Üí { name: "John", age: 25 }
obj2 ‚Üí Same Address (0x100)
```
üîπ **Both `obj1` and `obj2` hold the same memory address (`0x100`).**  
üîπ **If we modify `obj2`, it affects `obj1` since they point to the same object.**

### **Example in Code**
```js
let obj1 = { name: "John", age: 25 };
let obj2 = obj1; // Both obj1 and obj2 point to the same memory address

obj2.age = 30; // Modify obj2

console.log(obj1.age); // 30 (obj1 also changes)
console.log(obj2.age); // 30
```
üî¥ **Since `obj1` and `obj2` share the same reference, changing `obj2` also changes `obj1`.**  

---

## **3. Deep Copy (New Memory Address)**
A deep copy creates a **completely new object in a new memory location**. The new variable gets a different reference in heap memory.

### **Using `JSON.stringify() + JSON.parse()`**
```js
let obj1 = { name: "Alice", address: { city: "New York" } };
let obj2 = JSON.parse(JSON.stringify(obj1)); // Deep copy

// Memory Representation:
obj1 ‚Üí Address: 0x200 ‚Üí { name: "Alice", address: 0x201 }
obj2 ‚Üí Address: 0x300 ‚Üí { name: "Alice", address: 0x301 } (New Copy)
```
üîπ **`obj1` and `obj2` now have different memory addresses (`0x200` and `0x300`).**  
üîπ **Any modification in `obj2` does not affect `obj1`.**

### **Example in Code**
```js
let obj1 = { name: "Alice", address: { city: "New York" } };
let obj2 = JSON.parse(JSON.stringify(obj1)); // Deep copy

obj2.address.city = "Los Angeles"; // Modify obj2

console.log(obj1.address.city); // "New York" (Unchanged)
console.log(obj2.address.city); // "Los Angeles" (Different object)
```
‚úÖ **`obj2` now has a completely new memory address, so modifying it does not change `obj1`.**  
‚úÖ **Deep copies are useful when you want full independence between objects.**

---

## **4. Understanding Memory Address Behavior for Arrays**
Arrays are also stored in heap memory, similar to objects.

### **Shallow Copy with Spread Operator (`...`)**
```js
let arr1 = [1, 2, 3, { num: 4 }];
let arr2 = [...arr1]; // Shallow copy

// Memory Representation:
arr1 ‚Üí Address: 0x500 ‚Üí [1, 2, 3, Address: 0x501 ‚Üí { num: 4 }]
arr2 ‚Üí Address: 0x600 ‚Üí [1, 2, 3, Address: 0x501 (Same)]
```
üîπ The array elements (`1, 2, 3`) are copied as **new values**, but the object (`{ num: 4 }`) still shares the same reference.  
üîπ Modifying `arr2[3].num` **also changes `arr1[3].num`** because they both point to the same object.

### **Example**
```js
let arr1 = [1, 2, 3, { num: 4 }];
let arr2 = [...arr1]; // Shallow copy

arr2[3].num = 10; // Modify nested object

console.log(arr1[3].num); // 10 (Both changed)
console.log(arr2[3].num); // 10
```
üî¥ **Spread (`...`) only creates a shallow copy. Nested objects are still referenced.**  

---

### **Deep Copy for Arrays**
For a true deep copy, we need `JSON.parse(JSON.stringify())` or `_.cloneDeep()`.

```js
let arr1 = [1, 2, 3, { num: 4 }];
let arr2 = JSON.parse(JSON.stringify(arr1)); // Deep copy

// Memory Representation:
arr1 ‚Üí Address: 0x700 ‚Üí [1, 2, 3, Address: 0x701 ‚Üí { num: 4 }]
arr2 ‚Üí Address: 0x800 ‚Üí [1, 2, 3, Address: 0x801 ‚Üí { num: 4 }] (New Copy)
```
‚úÖ **Now, `arr1` and `arr2` are completely separate in memory.**  
‚úÖ **Changing `arr2[3].num` does not affect `arr1[3].num`.**

### **Example**
```js
let arr1 = [1, 2, 3, { num: 4 }];
let arr2 = JSON.parse(JSON.stringify(arr1)); // Deep copy

arr2[3].num = 10; // Modify arr2

console.log(arr1[3].num); // 4 (Unchanged)
console.log(arr2[3].num); // 10
```

---

## **Summary Table (Memory Address Perspective)**

| **Data Type** | **Copy Type** | **Memory Address (Before Copy)** | **Memory Address (After Copy)** | **Modifying Copy Affects Original?** |
|-------------|--------------|---------------------------------|---------------------------------|--------------------------------|
| **Primitive (Number, String, etc.)** | Deep Copy (default) | `a ‚Üí 0x001` ‚Üí `10` | `b ‚Üí 0x002` ‚Üí `10` | ‚ùå No |
| **Object (Shallow Copy)** | Reference Copy | `obj1 ‚Üí 0x100` | `obj2 ‚Üí 0x100` | ‚úÖ Yes |
| **Object (Deep Copy)** | New Object | `obj1 ‚Üí 0x200` | `obj2 ‚Üí 0x300` | ‚ùå No |
| **Array (Shallow Copy)** | Reference Copy | `arr1 ‚Üí 0x500` | `arr2 ‚Üí 0x600` (But nested objects share same address) | ‚úÖ Yes |
| **Array (Deep Copy)** | New Array | `arr1 ‚Üí 0x700` | `arr2 ‚Üí 0x800` | ‚ùå No |

---

### **Final Takeaways**
‚úî **Primitives always create a deep copy (new memory address).**  
‚úî **Objects and arrays create a shallow copy unless explicitly deep-copied.**  
‚úî **Shallow copies share memory addresses, while deep copies store independent data.**  
‚úî **Use `JSON.stringify()` or `_.cloneDeep()` for deep copying objects and arrays.**  

Let me know if you need further clarification! üöÄ