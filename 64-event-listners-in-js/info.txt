Q:-What is event listners in JS?
Ans:-In JavaScript, **event listeners** are functions that wait for specific events to occur on a given element (such as a button click, mouse movement, or key press) and execute a callback function when the event happens.

### **Adding an Event Listener**
The most common way to add an event listener is using the `.addEventListener()` method:

```javascript
document.getElementById("myButton").addEventListener("click", function() {
    alert("Button clicked!");
});
```
### **Syntax**
```javascript
element.addEventListener(event, callback, useCapture);
```
- **`event`** – The event type (e.g., `"click"`, `"mouseover"`, `"keydown"`).
- **`callback`** – The function to execute when the event occurs.
- **`useCapture`** (optional) – Boolean value determining event propagation mode (`false` by default, meaning bubbling phase).

### **Removing an Event Listener**
You can remove an event listener using `.removeEventListener()`, but the function must be named:

```javascript
function handleClick() {
    alert("Button clicked!");
}

document.getElementById("myButton").addEventListener("click", handleClick);
document.getElementById("myButton").removeEventListener("click", handleClick);
```

### **Common Event Types**
- **Mouse Events**: `"click"`, `"dblclick"`, `"mousedown"`, `"mouseup"`, `"mousemove"`
- **Keyboard Events**: `"keydown"`, `"keyup"`, `"keypress"`
- **Form Events**: `"submit"`, `"change"`, `"focus"`, `"blur"`
- **Window Events**: `"load"`, `"resize"`, `"scroll"`

Would you like an example of a more advanced use case, like event delegation? 🚀.

Q:-what is working of use capture last option in syntax?
Ans:-### **Understanding the `useCapture` Parameter in `addEventListener`**
The **third parameter** in `addEventListener(event, callback, useCapture)` is called `useCapture`. It controls **how the event propagates** through the DOM. It can be:
- `true` → **Capture Phase** (Event is handled during capturing)
- `false` (default) → **Bubbling Phase** (Event is handled during bubbling)

---

### **Event Propagation in JavaScript**
Events in JavaScript propagate in **three phases**:
1. **Capturing Phase (useCapture = true)**  
   - The event starts at the **top of the DOM tree** and moves **down to the target** element.
2. **Target Phase**  
   - The event reaches the **target element** (where it was triggered).
3. **Bubbling Phase (useCapture = false, default)**  
   - The event moves **back up the DOM** from the target element to the root.

---

### **Example: Bubbling vs. Capturing**
Let's say we have nested elements:

```html
<div id="parent">
    <button id="child">Click Me</button>
</div>
```

#### **Bubbling Example (Default `false`)**
```javascript
document.getElementById("parent").addEventListener("click", function() {
    console.log("Parent Clicked!");
}, false);  // Bubbling Phase

document.getElementById("child").addEventListener("click", function() {
    console.log("Child Clicked!");
}, false);  // Bubbling Phase
```
**Output when clicking the button (`child`)**:
```
Child Clicked!
Parent Clicked!
```
_(Child fires first, then Parent)_

#### **Capturing Example (`true`)**
```javascript
document.getElementById("parent").addEventListener("click", function() {
    console.log("Parent Clicked!");
}, true);  // Capture Phase

document.getElementById("child").addEventListener("click", function() {
    console.log("Child Clicked!");
}, false);  // Bubbling Phase
```
**Output when clicking the button (`child`)**:
```
Parent Clicked!
Child Clicked!
```
_(Parent fires first because capturing is enabled)_

---

### **When to Use `useCapture = true`?**
- When you want **parent elements** to handle events **before** children.
- Useful for **intercepting events early** before they reach a specific element.
- Rarely needed in practice; bubbling (`false`) is more commonly used.

Let me know if you need a deeper example! 🚀.




Q:-how many types of events listners. give me totao types?
Ans:-In JavaScript, event listeners can be categorized based on different types of events they listen for. Here’s a breakdown of the **total types of event listeners**:

### **1. Mouse Events** 🖱️  
   - `click`
   - `dblclick`
   - `mousedown`
   - `mouseup`
   - `mousemove`
   - `mouseover`
   - `mouseout`
   - `mouseenter`
   - `mouseleave`
   - `contextmenu` (right-click)

### **2. Keyboard Events** ⌨️  
   - `keydown`
   - `keyup`
   - `keypress` (deprecated)

### **3. Form Events** 📝  
   - `submit`
   - `change`
   - `input`
   - `focus`
   - `blur`
   - `reset`
   - `select`

### **4. Window/Document Events** 🏠  
   - `load`
   - `resize`
   - `scroll`
   - `unload`
   - `beforeunload`
   - `error`
   - `hashchange`
   - `popstate`

### **5. Clipboard Events** 📋  
   - `copy`
   - `cut`
   - `paste`

### **6. Drag & Drop Events** 🏗️  
   - `drag`
   - `dragstart`
   - `dragend`
   - `dragover`
   - `dragenter`
   - `dragleave`
   - `drop`

### **7. Media Events** 🎵📺  
   - `play`
   - `pause`
   - `ended`
   - `volumechange`
   - `timeupdate`
   - `seeking`
   - `seeked`

### **8. Touch Events** (for mobile devices) 📱  
   - `touchstart`
   - `touchmove`
   - `touchend`
   - `touchcancel`

### **9. Pointer Events** (for different input devices like stylus, mouse, or touch) 🎯  
   - `pointerdown`
   - `pointerup`
   - `pointermove`
   - `pointerover`
   - `pointerout`
   - `pointerenter`
   - `pointerleave`
   - `pointercancel`

### **10. Focus & Blur Events** 🔍  
   - `focus`
   - `blur`
   - `focusin`
   - `focusout`

### **11. Animation & Transition Events** 🎬  
   - `animationstart`
   - `animationend`
   - `animationiteration`
   - `transitionstart`
   - `transitionend`
   - `transitionrun`

### **12. WebSocket Events** 🌐  
   - `open`
   - `message`
   - `error`
   - `close`

---

### **Total Types of Event Listeners**
There are **12 main categories** of event listeners in JavaScript, each with multiple event types.

Would you like an example of handling any specific type of event? 🚀.



Q:- give me a list of total event listners, no any one should be mised?
Ans:-Here is a **complete list** of all **JavaScript event listeners** across different categories:  

---

### **1. Mouse Events** 🖱️  
- `click`
- `dblclick`
- `mousedown`
- `mouseup`
- `mousemove`
- `mouseover`
- `mouseout`
- `mouseenter`
- `mouseleave`
- `contextmenu`

---

### **2. Keyboard Events** ⌨️  
- `keydown`
- `keyup`
- `keypress` _(deprecated)_

---

### **3. Form Events** 📝  
- `submit`
- `reset`
- `change`
- `input`
- `focus`
- `blur`
- `focusin`
- `focusout`
- `select`

---

### **4. Window/Document Events** 🏠  
- `load`
- `unload`
- `beforeunload`
- `resize`
- `scroll`
- `hashchange`
- `popstate`
- `error`
- `offline`
- `online`
- `pagehide`
- `pageshow`
- `visibilitychange`
- `DOMContentLoaded`

---

### **5. Clipboard Events** 📋  
- `copy`
- `cut`
- `paste`

---

### **6. Drag & Drop Events** 🏗️  
- `drag`
- `dragstart`
- `dragend`
- `dragover`
- `dragenter`
- `dragleave`
- `drop`

---

### **7. Media Events** 🎵📺  
- `abort`
- `canplay`
- `canplaythrough`
- `durationchange`
- `emptied`
- `ended`
- `error`
- `loadeddata`
- `loadedmetadata`
- `loadstart`
- `pause`
- `play`
- `playing`
- `progress`
- `ratechange`
- `seeked`
- `seeking`
- `stalled`
- `suspend`
- `timeupdate`
- `volumechange`
- `waiting`

---

### **8. Touch Events** (for mobile devices) 📱  
- `touchstart`
- `touchmove`
- `touchend`
- `touchcancel`

---

### **9. Pointer Events** (for different input devices) 🎯  
- `pointerdown`
- `pointerup`
- `pointermove`
- `pointerover`
- `pointerout`
- `pointerenter`
- `pointerleave`
- `pointercancel`
- `gotpointercapture`
- `lostpointercapture`

---

### **10. Focus & Blur Events** 🔍  
- `focus`
- `blur`
- `focusin`
- `focusout`

---

### **11. Animation & Transition Events** 🎬  
- `animationstart`
- `animationend`
- `animationiteration`
- `transitionstart`
- `transitionend`
- `transitionrun`

---

### **12. WebSocket Events** 🌐  
- `open`
- `message`
- `error`
- `close`

---

### **13. Speech Recognition Events** 🎙️  
- `speechstart`
- `speechend`
- `audiostart`
- `audioend`
- `soundstart`
- `soundend`
- `result`
- `nomatch`
- `error`

---

### **14. Wheel & Scroll Events** 🔄  
- `wheel`
- `scroll`

---

### **15. Gamepad Events** 🎮  
- `gamepadconnected`
- `gamepaddisconnected`

---

### **16. Device Orientation & Motion Events** 📱🔄  
- `deviceorientation`
- `devicemotion`
- `deviceorientationabsolute`

---

### **17. Server-Sent Events (SSE)** 📡  
- `open`
- `message`
- `error`

---

### **18. Battery Status Events** 🔋  
- `chargingchange`
- `chargingtimechange`
- `dischargingtimechange`
- `levelchange`

---

### **19. Bluetooth Events** 📶  
- `advertisementreceived`
- `characteristicvaluechanged`
- `gattserverdisconnected`
- `serviceadded`
- `servicechanged`
- `serviceremoved`

---

### **20. Payment Request Events** 💳  
- `paymentmethodchange`
- `merchantvalidation`

---

### **21. Notification Events** 🔔  
- `show`
- `click`
- `close`
- `error`

---

### **Total Unique Event Listeners**  
There are **over 120+ event listeners** in JavaScript across **21 categories**.

Would you like examples for any specific event? 🚀.







