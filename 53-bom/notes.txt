BOM is an object model.which has key value pairs.This object is created by browser owners.whenever any company create its browsers (like chrome by google)then they make its object has name `window` and has some things in it(like methods) by which we can interact with browser(this is also defination of BOM).
like window.location interact our url. 
but we can directly call its browser like except Window.location we can directly call location in brower.


location has properties like hash,host,hoasname,href,origin,pathname,port,protols,reload etc.
like window.location.reload() is for reload the web page in which we are staying.
we can reload page with this on some particular events.
location.href give us current url.
by location.href="an-file-name.hrml" we can open any page in current url that is available on server. we can chenge current url with this. it open new file after adding "/" in current url. like if we are on 
http://localhost:5501/53-bom and write location.href="notes.txt" then it opens notes.txt neext this url like http://localhost:5501/53-bom/notes.txt on same domain.
but if we give  like in form of http:
location.href="https://www.w3schools.com/" then react at location with out staying in same domain without "/".
if we write "location.href="https://www.w3schools.com/" then we would not able to open our page insted we directly reach at https://www.w3schools.com/ on every opoening of out website.

form window.history object we can know our brower history which pages we opened. 
like from history.length,
we can also know how much pages are forware and how much pages are bacword remains by using history.forward() and by using history.back(). if no pages remian in forware or backware remian it gives us undefined.
we can also jump with history.go(3).
we can also find the height and width of current opeinging window in browser with window.innerHeight and window.innerWidth() but it give correct when we keep it zome on 100% exact.we can also find outer height and outer width with window.outerHeight and window.outerWidth().

window.open() open a new tab and return us the new tab's window object.
note:- every tab has own differnent window object.and each tab's variable belong to its tab, not any other tab.
window.open() we can open any thing in new tabs and its ref in  url with window.open("https://www.w3schools.com/") in new tab.like window.open("https://www.w3schools.com/") open website.we can also pass second parameter in like for name : window.open("https://www.w3schools.com/",""); thats why we should not write name variable,because variable always exist in browser.by default name is empty in tab.

window.close() for closing tab,but only those tabs thats are created with script.

widnow.resizeTo() for resizing window but only those that is created by window.open("","","reszeable") only.


remember DOM and BOM are part of web api not core javascript.web api means we interact with browser or website with the help of javascript that way provide by browser called web api.







<above content in easy form start>
### **üìå Browser Object Model (BOM) ‚Äì Simple Notes for Frontend Developers**  

#### **üîπ What is BOM?**  
- **BOM (Browser Object Model)** is a built-in **JavaScript model** provided by browsers.  
- It allows **interaction with the browser** (not the webpage content).  
- BOM is **different from DOM** (which deals with HTML elements).  

#### **üõ†Ô∏è `window` Object ‚Äì The Global Object**  
- `window` is the **main object** of BOM.  
- All BOM properties and methods belong to `window`.  
- You can access them directly (e.g., `location.href` instead of `window.location.href`).  

---

### **üìå Key BOM Features & Usage**  

### **üîπ `window.location` ‚Äì Working with URLs**  
The `location` object helps interact with the URL.  

```js
console.log(location.href); // Get the current page URL
console.log(location.hostname); // Get the domain name
console.log(location.pathname); // Get the path after domain
console.log(location.protocol); // Get protocol (http / https)
console.log(location.port); // Get port number (if available)
console.log(location.origin); // Get full domain (protocol + hostname)
console.log(location.hash); // Get hash part of the URL (if any)
```

‚úÖ **Reload Page:**  
```js
location.reload(); // Refresh the current page
```

‚úÖ **Redirect to a New Page (Same Domain):**  
```js
location.href = "about.html"; // Opens 'about.html' in the same domain
```

‚úÖ **Redirect to a New Website (Different Domain):**  
```js
location.href = "https://www.google.com"; // Opens Google
```

---

### **üîπ `window.history` ‚Äì Browser History**  
The `history` object helps navigate back and forth in the browser history.

```js
console.log(history.length); // Get the number of visited pages in session

history.back();   // Go to the previous page
history.forward(); // Go to the next page
history.go(-2);   // Jump 2 pages back
history.go(3);    // Jump 3 pages forward
```

‚ö†Ô∏è If there are no more pages forward or backward, it returns `undefined`.  

---

### **üîπ `window.open()` & `window.close()` ‚Äì Controlling Browser Tabs**  

‚úÖ **Open a New Tab:**  
```js
window.open("https://www.google.com"); // Opens Google in a new tab
```

‚úÖ **Open a Tab with a Custom Name (Avoid Using Reserved Words):**  
```js
window.open("https://www.google.com", "myTab");
```

‚úÖ **Close a Tab (Only if Opened via `window.open()`):**  
```js
const newTab = window.open("https://www.google.com");
newTab.close(); // Closes the new tab
```

‚úÖ **Resize a Window (Only for Resizable Windows):**  
```js
window.resizeTo(800, 600); // Resizes the window to 800x600
```

---

### **üîπ `window.innerWidth` & `window.innerHeight` ‚Äì Getting Window Size**  
‚úÖ **Get the Current Window Size:**  
```js
console.log(window.innerWidth);  // Inner width of the browser
console.log(window.innerHeight); // Inner height of the browser
```
‚ö†Ô∏è Works best at **100% zoom level**.  

‚úÖ **Get the Entire Window Size (Including Browser UI):**  
```js
console.log(window.outerWidth);  // Full width including browser frame
console.log(window.outerHeight); // Full height including browser frame
```

---

### **üìå Important Notes for Frontend Developers**  
1Ô∏è‚É£ **BOM ‚â† DOM**  
   - **BOM** helps interact with the browser (URLs, history, window size, etc.).  
   - **DOM** helps interact with the webpage content (HTML elements).  

2Ô∏è‚É£ **BOM is a Part of Web APIs**  
   - BOM methods are **provided by the browser**, not JavaScript itself.  
   - Web APIs allow JavaScript to interact with the browser environment.  

3Ô∏è‚É£ **LocalStorage & SessionStorage Are Also BOM Parts**  
   - These allow storing data in the browser (useful for saving user preferences).  

4Ô∏è‚É£ **Avoid Frequent Use of `location.reload()`**  
   - It refreshes the page and **loses all unsaved user input**.  

5Ô∏è‚É£ **Security Restrictions on `window.open()`**  
   - You **cannot close a tab** unless it was opened by your script.  
   - Some browsers **block `window.open()`** in pop-up blockers.  

---

### **üöÄ Final Tips**
‚úÖ Use `location.href` carefully when redirecting to **external** sites.  
‚úÖ Avoid excessive use of `history.back()` as users might find it annoying.  
‚úÖ `window.open()` is useful for opening **external links without affecting user navigation**.  
‚úÖ Use `window.innerWidth` and `window.innerHeight` to create **responsive UI designs**.  

This should give you a solid understanding of **BOM** and its usage in frontend development! üöÄ
<above content in easy form end/>









<more info start>
Absolutely! Let‚Äôs break down the **BOM (Browser Object Model)** in an easy-to-understand and detailed way so you can take notes and prepare for your frontend interview.

---

## **What is BOM?**
The **Browser Object Model (BOM)** is a set of objects provided by the browser that allows JavaScript to interact with the browser itself. Unlike the **DOM (Document Object Model)**, which deals with the structure and content of the web page, the BOM deals with the browser window and its components.

---

## **Key Components of BOM**
The BOM consists of several objects that represent different parts of the browser. Here are the most important ones:

---

### 1. **`window` Object**
- The `window` object is the **global object** in the browser.
- It represents the browser window and contains all other BOM objects.
- Even if you don‚Äôt explicitly write `window`, it is implied. For example, `alert()` is the same as `window.alert()`.

#### **Properties of `window`**:
- `window.innerWidth`: Width of the browser window (viewport).
- `window.innerHeight`: Height of the browser window (viewport).
- `window.outerWidth`: Width of the entire browser window (including toolbars, etc.).
- `window.outerHeight`: Height of the entire browser window (including toolbars, etc.).
- `window.location`: Provides information about the current URL and allows navigation.
- `window.document`: Refers to the **DOM** (Document Object Model) of the current page.
- `window.history`: Allows access to the browser‚Äôs session history.
- `window.navigator`: Provides information about the browser and operating system.
- `window.screen`: Provides information about the user‚Äôs screen.

#### **Methods of `window`**:
- `window.alert()`: Displays an alert box with a message.
- `window.confirm()`: Displays a confirmation dialog with OK and Cancel buttons.
- `window.prompt()`: Displays a dialog box that prompts the user for input.
- `window.open()`: Opens a new browser window or tab.
- `window.close()`: Closes the current browser window.
- `window.setTimeout()`: Executes a function after a specified delay.
- `window.setInterval()`: Repeatedly executes a function at specified intervals.

---

### 2. **`location` Object**
- The `location` object provides information about the **current URL** and allows you to navigate to new URLs.

#### **Properties of `location`**:
- `location.href`: The full URL of the current page.
- `location.protocol`: The protocol (e.g., `http:` or `https:`).
- `location.host`: The hostname and port (e.g., `www.example.com:8080`).
- `location.hostname`: The hostname (e.g., `www.example.com`).
- `location.port`: The port number (e.g., `8080`).
- `location.pathname`: The path of the URL (e.g., `/folder/page.html`).
- `location.search`: The query string (e.g., `?id=123`).
- `location.hash`: The fragment identifier (e.g., `#section1`).

#### **Methods of `location`**:
- `location.assign(url)`: Loads a new document.
- `location.reload()`: Reloads the current document.
- `location.replace(url)`: Replaces the current document with a new one (does not add to history).

---

### 3. **`history` Object**
- The `history` object allows you to interact with the browser‚Äôs session history (back/forward navigation).

#### **Properties of `history`**:
- `history.length`: The number of URLs in the history list.

#### **Methods of `history`**:
- `history.back()`: Goes back to the previous page in history.
- `history.forward()`: Goes forward to the next page in history.
- `history.go(n)`: Goes to a specific page in history (`n` can be positive or negative).

---

### 4. **`navigator` Object**
- The `navigator` object provides information about the **browser** and **operating system**.

#### **Properties of `navigator`**:
- `navigator.userAgent`: The user agent string (identifies the browser and OS).
- `navigator.platform`: The operating system platform (e.g., `Win32`, `MacIntel`).
- `navigator.language`: The browser‚Äôs language (e.g., `en-US`).
- `navigator.cookieEnabled`: Whether cookies are enabled.
- `navigator.onLine`: Whether the browser is online.

#### **Methods of `navigator`**:
- `navigator.geolocation.getCurrentPosition()`: Retrieves the user‚Äôs current location.
- `navigator.clipboard.writeText()`: Writes text to the clipboard.

---

### 5. **`screen` Object**
- The `screen` object provides information about the **user‚Äôs screen**.

#### **Properties of `screen`**:
- `screen.width`: The width of the screen in pixels.
- `screen.height`: The height of the screen in pixels.
- `screen.availWidth`: The width of the screen excluding taskbars, etc.
- `screen.availHeight`: The height of the screen excluding taskbars, etc.
- `screen.colorDepth`: The color depth of the screen (in bits).

---

## **Why is BOM Important?**
- **Browser Interaction**: The BOM allows JavaScript to interact with the browser, enabling features like navigation, alerts, and screen information.
- **Global Scope**: The `window` object is the global scope in the browser, meaning all global variables and functions are properties of `window`.
- **Dynamic Web Pages**: The BOM enables dynamic behavior like opening new windows, navigating back/forward, and accessing browser details.

---

## **Example Use Cases**
1. **Redirecting to a New Page**:
   ```javascript
   window.location.href = "https://www.example.com";
   ```

2. **Reloading the Page**:
   ```javascript
   window.location.reload();
   ```

3. **Opening a New Window**:
   ```javascript
   window.open("https://www.example.com", "_blank");
   ```

4. **Getting Screen Resolution**:
   ```javascript
   console.log(`Screen Resolution: ${screen.width}x${screen.height}`);
   ```

5. **Getting Browser Information**:
   ```javascript
   console.log(`User Agent: ${navigator.userAgent}`);
   ```

---

## **Interview Questions on BOM**
Here are some common interview questions related to the BOM:
1. What is the difference between the **DOM** and the **BOM**?
2. How do you redirect a user to a new page using JavaScript?
3. What is the purpose of the `window` object?
4. How do you detect the user‚Äôs browser and operating system?
5. How do you reload the current page using JavaScript?
6. What is the `history` object, and how do you use it?
7. How do you open a new browser window using JavaScript?

---

## **Summary**
- The **BOM (Browser Object Model)** is a set of objects that allow JavaScript to interact with the browser.
- Key objects include `window`, `location`, `history`, `navigator`, and `screen`.
- The BOM is essential for tasks like navigation, alerts, and accessing browser/screen information.
- It is different from the **DOM**, which deals with the structure and content of the web page.

---

Feel free to use this as your notes for interview preparation! Let me know if you need further clarification or more examples. üòä
<more info end/>