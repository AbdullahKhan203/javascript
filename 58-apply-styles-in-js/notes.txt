How to apply styles in js?
if we try to get css by  document.querySelectorAll('a').style
then it give us object 'CSSSTYLEDECLARATION':-which have whole style properties.
but the style properties Which we had apply in style.css. It give us only the CSS property values which we applied through inline CSS over by JS.
inline style  has more'selector specificity' than style.css style.Those style is applied which has more selecter specificity.

<question start>
q:-why it gives the style which we give in inline or by js, and not give the style which we give in style.css file?
ans:-Great question! The reason **`element.style`** only returns inline styles or styles set via JavaScript and **not** styles from an external CSS file (like `style.css`) is due to how the **style object** works in the DOM.

---

### **Why `element.style` Only Returns Inline Styles?**
The `.style` property on a DOM element **only reflects the styles that are set directly in the element‚Äôs `style` attribute**.

#### ‚úÖ **Example (Inline Style)**
```html
<a href="#" style="color: red;">Click me</a>
```
```javascript
console.log(document.querySelector('a').style.color); // "red"
```
‚úÖ **Works!** Because `color: red;` is an **inline style**.

---

### **Why `.style` Does NOT Show External CSS Styles?**
When you define styles in an **external CSS file** (`style.css`) or inside a `<style>` tag, they are applied via the **CSSOM (CSS Object Model)**, not via the `style` attribute.

#### ‚ùå **Example (External CSS)**
```html
<head>
  <link rel="stylesheet" href="style.css">
  <style>
    a { color: blue; }
  </style>
</head>
<body>
  <a href="#">Click me</a>
</body>
```

‚úÖ **CSS File (`style.css`):**
```css
a {
  color: green;
}
```

‚úÖ **JavaScript Check:**
```javascript
console.log(document.querySelector('a').style.color);
```

üîπ **Output:** `""` (empty string)

üí° **Why?**
- The `.style` property only shows **inline styles**.
- Since `color: green;` is applied via **external CSS**, it's not stored in the `style` attribute.
- **The `.style` object does not include computed styles.**

---

### **How to Get Styles from CSS Files?**
If you want to get the **actual computed style** (including CSS files and `<style>` tags), use:

```javascript
window.getComputedStyle(document.querySelector('a')).color;
```

üîπ **Example Output:**
```javascript
"rgb(0, 128, 0)" // If CSS sets `color: green;`
```

---

### **Summary**
| Method | Returns |
|--------|---------|
| `element.style.property` | ‚úÖ Only **inline styles** or styles set via JavaScript |
| `getComputedStyle(element).property` | ‚úÖ **Final computed style** (from CSS file, `<style>` tag, or inline styles) |

Would you like more examples on manipulating styles dynamically? üöÄ.


note:- it is useless get properties which we give in style.css. because they can't change able.
<question end/>
 if we give css like by document.querySelector('a').style.backgroundColor="green". then this will add in stype attribute of element(in inline) in DOM.

 similarly we can get whole elements of app, can apply styling to whole app in form of loop or maually.
 like:-
 let anchorTags=document.querySelectorAll('a')
console.log(anchorTags);
for(let x of anchorTags){
      x.style.color="teal"
    x.style.textDecoration="none"
    x.style.fontWeight="700"
    x.style.fontFamily="cursive"
}

note:- we can get check elements properties with click on element in dev tools, and property tab in sidebar paneel. 

### **Notes on Applying Styles to Elements in JavaScript**  

There are different ways to apply styles to elements using JavaScript, but some are better than others. Here‚Äôs a breakdown of the best approaches:  

---
<Notes on Applying Styles to Elements in JavaScript start>
### **1. Directly Setting Individual `style` Properties (Not Recommended)**
```js
x.style.color = "teal";
x.style.textDecoration = "none";
x.style.fontWeight = "700";
x.style.fontFamily = "cursive";
```
‚úÖ **Works** but ‚ùå **Not efficient** because it applies styles one by one, making code lengthy.  

---

### **2. Using `style.cssText` (Not Recommended)**
```js
x.style.cssText = `color: teal; 
text-decoration: none; 
font-weight: 700;`;
```
‚úÖ **Shorter code**  
‚ùå **Overwrites all inline styles**, which may remove existing styles.  

---

### **3. Using `className` (Okay for a Single Class, Not Best for Multiple)**
```js
x.className = "green-link wavy-link";
```
‚úÖ **Good for setting a class if the element has no existing class.**  
‚ùå **Removes previous classes and replaces them with new ones.**  

---

### **4. Using `setAttribute("class", "class-name")` (Not Recommended)**
```js
x.setAttribute("class", "green-link");
```
‚úÖ **Works but same issue as `className` ‚Üí it overwrites all existing classes.**  
‚ùå **Not useful when adding multiple classes dynamically.**  

---

### **5. Best Approach ‚Üí Using `classList` (Recommended)**
```js
x.classList.add("green-link");
x.classList.add("wavy-link");
```
‚úÖ **Best for adding multiple classes without removing existing ones.**  

---

### **6. Using `classList.toggle()` (For Adding/Removing a Class Dynamically)**
```js
x.classList.toggle("wavy-link");
```
‚úÖ **If the class is present, it removes it. If not, it adds it.**  
‚úÖ **Useful for adding/removing effects like dark mode, active links, etc.**  

---

### **Final Best Practices:**  
‚úîÔ∏è **Use CSS classes (`classList.add()`) instead of inline styles for better performance and organization.**  
‚úîÔ∏è **Use `toggle()` for features that need dynamic on/off behavior.**  
‚ùå **Avoid `style.cssText` and `setAttribute("class", "name")` since they overwrite existing styles.**  

üîπ **Remember:** Always prefer writing styles in a CSS file and applying them using `classList` for maintainable and scalable code. üöÄ
alos remember:-
### **Important Notes on Applying Styles Dynamically in JavaScript**  

As a frontend developer, you should understand the best ways to apply and manage styles efficiently in JavaScript. Here‚Äôs a detailed breakdown of different methods and best practices for long-term use:  

---

## **1. Directly Setting Individual `style` Properties (Not Recommended for Multiple Styles)**  
```js
x.style.color = "teal";
x.style.textDecoration = "none";
x.style.fontWeight = "700";
x.style.fontFamily = "cursive";
```
‚úÖ **Good for quick testing or applying a single style dynamically.**  
‚ùå **Not efficient for multiple styles, as it modifies properties one by one.**  
‚ùå **Hard to maintain if styles need frequent changes.**  

---

## **2. Using `style.cssText` (Not Recommended)**
```js
x.style.cssText = `color: teal; 
text-decoration: none; 
font-weight: 700;`;
```
‚úÖ **Shorter than individual `style` properties.**  
‚ùå **Overwrites all inline styles on the element, removing existing ones.**  
‚ùå **Less readable and maintainable than using CSS classes.**  

---

## **3. Using `className` (Okay for a Single Class, Not Best for Multiple)**
```js
x.className = "green-link wavy-link";
```
‚úÖ **Works well when an element has no existing class.**  
‚ùå **Replaces all previous classes, which can remove important styles.**  
‚ùå **Not flexible for adding/removing specific styles dynamically.**  

---

## **4. Using `setAttribute("class", "class-name")` (Not Recommended)**
```js
x.setAttribute("class", "green-link");
```
‚úÖ **Works but behaves like `className`‚Äîoverwrites all existing classes.**  
‚ùå **Not practical when adding multiple classes dynamically.**  

---

## **5. Best Practice ‚Üí Using `classList.add()` (Recommended)**
```js
x.classList.add("green-link");
x.classList.add("wavy-link");
```
‚úÖ **Best for adding multiple classes without removing existing ones.**  
‚úÖ **Keeps the original classes intact while adding new ones.**  
‚úÖ **More readable and maintainable than inline styles.**  

---

## **6. Using `classList.remove()` (For Removing a Specific Class)**
```js
x.classList.remove("wavy-link");
```
‚úÖ **Removes only the specified class while keeping others.**  
‚úÖ **Useful when dynamically toggling between styles.**  

---

## **7. Using `classList.toggle()` (Best for Toggling Styles Dynamically)**
```js
x.classList.toggle("wavy-link");
```
‚úÖ **If the class is present, it removes it. If not, it adds it.**  
‚úÖ **Perfect for interactive features like dark mode, dropdowns, etc.**  

---

## **8. Checking if an Element Has a Class (`classList.contains()`)**
```js
if (x.classList.contains("green-link")) {
  console.log("Element already has green-link class.");
}
```
‚úÖ **Useful when checking the presence of a class before adding/removing.**  

---

## **9. Using CSS for Better Performance Instead of Inline Styles**
‚úîÔ∏è **Write styles in a CSS file instead of JavaScript whenever possible.**  
‚úîÔ∏è **Use `classList` to dynamically apply CSS instead of modifying `style`.**  
‚úîÔ∏è **Avoid inline styles in JavaScript unless necessary.**  

‚úÖ **Good CSS Approach (styles.css)**  
```css
.green-link {
  color: teal;
  text-decoration: none;
  font-weight: 700;
  font-family: cursive;
}

.wavy-link {
  text-decoration: wavy underline;
}
```
```js
x.classList.add("green-link"); // Apply styles efficiently
```

---

## **10. Bonus: Best Practices for Frontend Developers**
- ‚úÖ **Use `classList.add()` instead of `style.cssText` for maintainability.**  
- ‚úÖ **Use `toggle()` for switching effects (e.g., dark mode, dropdowns).**  
- ‚úÖ **Minimize direct `style` modifications in JavaScript.**  
- ‚úÖ **Keep styling logic separate from JavaScript logic (use CSS classes).**  
- ‚úÖ **Use `contains()` before `remove()` if needed to prevent errors.**  
- ‚ùå **Avoid modifying `className` and `setAttribute("class", "name")` directly.**  
- ‚ùå **Don't rely on `style.cssText` as it replaces all inline styles.**  

---

### **Conclusion: The Best Approach**
üî• **Use `classList.add()`, `classList.remove()`, and `classList.toggle()` for best performance and maintainability.**  
üî• **Write styles in CSS and apply them dynamically via classes instead of inline styles.**  

Would you like additional real-world examples or explanations? üöÄ

note:- the styles we add by this is add in element inline not in syle.css.
<Notes on Applying Styles to Elements in JavaScript end/>







